{"version":3,"file":"effector.mjs","sources":["effector/collection.ts","effector/throw.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/config.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fromObservable.ts","effector/merge.ts","effector/sample.ts","effector/guard.ts","effector/restore.ts","effector/split.ts","effector/fork/allSettled.ts","effector/fork/util.ts","effector/fork/fork.ts","effector/fork/createScope.ts","effector/fork/hydrate.ts","effector/fork/scopeBind.ts","effector/fork/serialize.ts","effector/createWatch.ts","effector/observable.ts","effector/getter.ts","effector/validate.ts","effector/id.ts","effector/own.ts","effector/is.ts","effector/caller.ts","effector/step.ts","effector/stateRef.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts"],"sourcesContent":["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import type {Template} from '../forest/index.h'\nimport type {NodeUnit} from './index.h'\nimport {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: NodeUnit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n  meta?: Record<string, any> | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n      meta,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void | null\n  stack?: Stack | void\n  meta?: Record<string, any> | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  let meta: Record<string, any> | void\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    meta = unit.meta\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n        meta,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n      meta,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n    fromSerialize?: boolean\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.sidValuesMap[sid])\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n","import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  return finalEvent\n}\nfunction on<State>(\n  store: Store<State>,\n  methodName: string,\n  nodeSet: CommonUnit | CommonUnit[],\n  fn: Function,\n) {\n  assertNodeSet(nodeSet, methodName, 'first argument')\n  assert(isFunction(fn), 'second argument should be a function')\n  deprecate(\n    !getMeta(store, 'derived'),\n    `${methodName} in derived store`,\n    `${methodName} in store created via createStore`,\n  )\n  forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n    store.off(trigger)\n    getSubscribers(store).set(\n      trigger,\n      createSubscription(updateStore(trigger, store, 'on', callARegStack, fn)),\n    )\n  })\n  return store\n}\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit =>\n        on(store, '.reset', unit, () => store.defaultState),\n      )\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      return on(store, '.on', nodeSet, fn)\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const customSerialize = !serializeMeta || ignored ? false : serializeMeta\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n\n    if (customSerialize) {\n      plainState.meta = {\n        ...plainState?.meta,\n        serialize: customSerialize,\n      }\n    }\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>()\n    store.reset(store.reinit)\n  }\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n","import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\nimport {nextEffectID} from './id'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        if (!stack.meta) {\n          stack.meta = {fxID: nextEffectID()}\n        }\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n          meta: stack.meta,\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n    }\n    launch({\n      target: instance,\n      params: payload,\n      scope: forkPage,\n    })\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n      meta: stack.meta,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n            meta: stack.meta,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  assert(is.unit(source), 'source must be a unit')\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any> | Scope,\n  //@ts-expect-error its optional in correct cases\n  {scope, params: ctx}: {scope: Scope; params?: unknown} = {},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (\n    !is.effect(start) &&\n    !is.event(start) &&\n    !is.store(start) &&\n    !is.scope(start)\n  )\n    return Promise.reject(\n      new Error(\n        'first argument accepts only effects, events, stores or scopes',\n      ),\n    )\n  /** duplicated check because of ts validation */\n  if (is.scope(start)) {\n    scope = start\n  }\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = []\n  const launchParams: Array<{params: unknown; req: unknown} | null> = []\n  if (!is.scope(start)) {\n    add(launchUnits, start)\n    add(\n      launchParams,\n      is.effect(start)\n        ? {\n            params: ctx,\n            req: {\n              rs(value: unknown) {\n                defer.value = {status: 'done', value}\n              },\n              rj(value: unknown) {\n                defer.value = {status: 'fail', value}\n              },\n            },\n          }\n        : ctx,\n    )\n  }\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  if (mapOrRecordValues instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return mapOrRecordValues\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize) {\n              if (serialize === 'ignore') {\n                forkPage.sidSerializeSettings.set(sid, {ignore: true})\n              } else {\n                forkPage.sidSerializeSettings.set(sid, {\n                  ignore: false,\n                  write: serialize.write,\n                })\n              }\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    sidSerializeSettings: new Map(),\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      const serializer = getMeta(node, 'serialize')\n      if (serializer && serializer !== 'ignore') {\n        normalizedValues[sid] = serializer.read(normalizedValues[sid])\n      }\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializeSettings = scope.sidSerializeSettings.get(sid) ?? {\n      ignore: false,\n      write: noopSerializer,\n    }\n    if (serializeSettings.ignore) return\n    const serializer = serializeSettings.write\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\nexport const nextEffectID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","add","result","id","nextNodeID","next","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","store","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","setStoreName","rawName","shortName","Object","assign","createName","path","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","createEvent","nameOrConfig","maybeConfig","config","flattenConfig","event","deprecate","oldPage","setCurrentPage","create","callCreate","finalEvent","graphite","initUnit","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","domain","hooks","on","methodName","nodeSet","assertNodeSet","isFunction","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","currentSubscription","get","firstState","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","updateFilter","defaultConfig","upd","_","b","read","a","mov","serializeMeta","ignored","customSerialize","sid","setMeta","serialize","reinit","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createStoreObject","createDefer","req","Promise","rs","rj","catch","createEffect","instance","kind","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","handlerId","getType","scope_","handler_","scopeRef","createScopeRef","onResolve","onSettled","onReject","ok","runFn","then","op","fx","fxID","nextEffectID","savedFork","setForkPage","inFlight","x","pending","amount","effect","attach","injected","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","splice","parentDomain","createApi","setters","createDomain","history","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","onCreateUnit","Set","ownerSet","hook","fromObservable","observable","observableItem","observableSymbol","subscribe","disposer","complete","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","sample","clock","batched","greedy","createSampling","guard","restore","split","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","assertTarget","__","splitterSeq","values","caseNames","keys","compute","scopeTargets","String","launchCase","includes","lastValues","needBarrier","storeOrFn","updater","storeRef","caseName","splitterNode","allSettled","start","ctx","reject","parentFork","defers","launchUnits","launchParams","traverseStores","root","visit","normalizeValues","assertEach","mapOrRecordValues","fork","domainOrConfig","optionalConfig","forkInFlightCounter","batch","resolve","storeStack","storeNode","sidIdMap","sidValuesMap","sidSerializeSettings","ignore","write","warnSerialize","resultScope","cloneOf","activeEffects","createScope","oldScope","ref","valuesSidMap","fromSerialize","hydrate","traverseTarget","needToAssign","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","serializer","scopeBind","savedForkPage","console","ignoredStores","serializeSettings","noopSerializer","onlyChanges","createWatch","run","scopeLinks","push","indexOf","clearNode","callback","unsubscribe","Symbol","graph","val","compositeName","removeItem","pos","subject","suggestion","idCount","nextUnitID","nextStepID","readSidRoot","withFactory","loc","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","targetField","cmd","nextBarrierID","isEffect","toStack","samplerPriority","isFilter","before","heap","ret","v","getPriority","r","l","queue","ix","first","last","size","bucket","t","newForkPage","newPage","isGetState","noopParser","sourceRef","isKernelCall","refsMap","_sourceRef$meta","isFresh","err","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","events","effects","domains","scopeFn","forward","opts","hookType","isDomain","unitId","thru","observer","nativeTemplate","mapped","caller","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","sidechain","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","filterRef","hasFilter","syncSourceState","readAndFilter","hasSource","jointNode","src","joint","isSourceStore"],"mappings":"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"}
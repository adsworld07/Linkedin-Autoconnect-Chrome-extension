{"version":3,"file":"effector.umd.js","sources":["../../src/effector/collection.ts","../../src/effector/throw.ts","../../src/effector/region.ts","../../src/effector/createNode.ts","../../src/effector/kernel.ts","../../src/effector/naming.ts","../../src/effector/config.ts","../../src/effector/template.ts","../../src/effector/createUnit.ts","../../src/effector/tag.ts","../../src/effector/combine.ts","../../src/effector/defer.ts","../../src/effector/createEffect.ts","../../src/effector/merge.ts","../../src/effector/sample.ts","../../src/effector/fork/util.ts","../../src/effector/createWatch.ts","../../src/effector/observable.ts","../../src/effector/getter.ts","../../src/effector/validate.ts","../../src/effector/id.ts","../../src/effector/own.ts","../../src/effector/is.ts","../../src/effector/caller.ts","../../src/effector/step.ts","../../src/effector/stateRef.ts","../../src/effector/clearNode.ts","../../src/effector/subscription.ts","../../src/effector/forward.ts","../../src/effector/watch.ts","../../src/effector/split.ts","../../src/effector/fork/serialize.ts","../../src/effector/fork/allSettled.ts","../../src/effector/attach.ts","../../src/effector/createApi.ts","../../src/effector/createDomain.ts","../../src/effector/fork/fork.ts","../../src/effector/fork/createScope.ts","../../src/effector/fromObservable.ts","../../src/effector/guard.ts","../../src/effector/fork/hydrate.ts","../../src/effector/restore.ts","../../src/effector/fork/scopeBind.ts"],"sourcesContent":["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import type {Template} from '../forest/index.h'\nimport type {NodeUnit} from './index.h'\nimport {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: NodeUnit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n  meta?: Record<string, any> | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n      meta,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void | null\n  stack?: Stack | void\n  meta?: Record<string, any> | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  let meta: Record<string, any> | void\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    meta = unit.meta\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n        meta,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n      meta,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n    fromSerialize?: boolean\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.sidValuesMap[sid])\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n","import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  return finalEvent\n}\nfunction on<State>(\n  store: Store<State>,\n  methodName: string,\n  nodeSet: CommonUnit | CommonUnit[],\n  fn: Function,\n) {\n  assertNodeSet(nodeSet, methodName, 'first argument')\n  assert(isFunction(fn), 'second argument should be a function')\n  deprecate(\n    !getMeta(store, 'derived'),\n    `${methodName} in derived store`,\n    `${methodName} in store created via createStore`,\n  )\n  forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n    store.off(trigger)\n    getSubscribers(store).set(\n      trigger,\n      createSubscription(updateStore(trigger, store, 'on', callARegStack, fn)),\n    )\n  })\n  return store\n}\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit =>\n        on(store, '.reset', unit, () => store.defaultState),\n      )\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      return on(store, '.on', nodeSet, fn)\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const customSerialize = !serializeMeta || ignored ? false : serializeMeta\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n\n    if (customSerialize) {\n      plainState.meta = {\n        ...plainState?.meta,\n        serialize: customSerialize,\n      }\n    }\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>()\n    store.reset(store.reinit)\n  }\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n","import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\nimport {nextEffectID} from './id'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        if (!stack.meta) {\n          stack.meta = {fxID: nextEffectID()}\n        }\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n          meta: stack.meta,\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n    }\n    launch({\n      target: instance,\n      params: payload,\n      scope: forkPage,\n    })\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n      meta: stack.meta,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  if (mapOrRecordValues instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return mapOrRecordValues\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\nexport const nextEffectID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  assert(is.unit(source), 'source must be a unit')\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializeSettings = scope.sidSerializeSettings.get(sid) ?? {\n      ignore: false,\n      write: noopSerializer,\n    }\n    if (serializeSettings.ignore) return\n    const serializer = serializeSettings.write\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any> | Scope,\n  //@ts-expect-error its optional in correct cases\n  {scope, params: ctx}: {scope: Scope; params?: unknown} = {},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (\n    !is.effect(start) &&\n    !is.event(start) &&\n    !is.store(start) &&\n    !is.scope(start)\n  )\n    return Promise.reject(\n      new Error(\n        'first argument accepts only effects, events, stores or scopes',\n      ),\n    )\n  /** duplicated check because of ts validation */\n  if (is.scope(start)) {\n    scope = start\n  }\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = []\n  const launchParams: Array<{params: unknown; req: unknown} | null> = []\n  if (!is.scope(start)) {\n    add(launchUnits, start)\n    add(\n      launchParams,\n      is.effect(start)\n        ? {\n            params: ctx,\n            req: {\n              rs(value: unknown) {\n                defer.value = {status: 'done', value}\n              },\n              rj(value: unknown) {\n                defer.value = {status: 'fail', value}\n              },\n            },\n          }\n        : ctx,\n    )\n  }\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n            meta: stack.meta,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize) {\n              if (serialize === 'ignore') {\n                forkPage.sidSerializeSettings.set(sid, {ignore: true})\n              } else {\n                forkPage.sidSerializeSettings.set(sid, {\n                  ignore: false,\n                  write: serialize.write,\n                })\n              }\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    sidSerializeSettings: new Map(),\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      const serializer = getMeta(node, 'serialize')\n      if (serializer && serializer !== 'ignore') {\n        normalizedValues[sid] = serializer.read(normalizedValues[sid])\n      }\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","add","result","id","nextNodeID","next","CROSSLINK","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","REG_A","VALUE","store","STORE","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","createEvent","nameOrConfig","maybeConfig","config","flattenConfig","event","deprecate","oldPage","setCurrentPage","create","callCreate","finalEvent","Object","assign","graphite","initUnit","EVENT","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","domain","hooks","on","methodName","nodeSet","assertNodeSet","isFunction","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","currentSubscription","get","firstState","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","updateFilter","defaultConfig","upd","_","b","read","a","mov","serializeMeta","ignored","customSerialize","sid","setMeta","serialize","reinit","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","kind","EFFECT","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","handlerId","getType","scope_","handler_","scopeRef","createScopeRef","onResolve","onSettled","onReject","ok","runFn","then","op","fx","fxID","nextEffectID","savedFork","setForkPage","inFlight","x","pending","amount","effect","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","traverseStores","root","visit","includes","normalizeValues","values","assertEach","mapOrRecordValues","callback","unsubscribe","observableSymbol","Symbol","observable","DOMAIN","SCOPE","SAMPLER","BARRIER","SAMPLE","graph","val","compositeName","removeItem","pos","indexOf","splice","push","subject","suggestion","console","idCount","nextUnitID","nextStepID","readSidRoot","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","assertTarget","targetField","cmd","batch","nextBarrierID","compute","run","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","ret","v","getPriority","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","noopParser","sourceRef","isKernelCall","refsMap","_sourceRef$meta","sidValuesMap","sidIdMap","fromSerialize","isFresh","needToAssign","err","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","events","effects","domains","scopeFn","hookType","isDomain","unitId","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","activeEffects","sidechain","createSampling","clock","batched","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","filterRef","hasFilter","syncSourceState","readAndFilter","hasSource","jointNode","src","joint","isSourceStore","launchCase","scopeTargets","noopSerializer","start","ctx","reject","parentFork","defers","launchUnits","launchParams","injected","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","parentDomain","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","onCreateUnit","createNamedEvent","hook","scopeLinks","domainOrConfig","optionalConfig","forkInFlightCounter","resolve","__","storeStack","storeNode","sidSerializeSettings","ignore","write","warnSerialize","resultScope","cloneOf","createScope","oldScope","valuesSidMap","opts","observableItem","disposer","complete","greedy","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","serializer","savedForkPage","ignoredStores","serializeSettings","onlyChanges","rawName","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","splitterNode","loc"],"mappings":"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"}
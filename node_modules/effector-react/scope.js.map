{"version":3,"file":"scope.js","sources":["effector-react/createWatch.ts","effector-react/withDisplayName.ts","effector-react/apiBase.ts","effector-react/../effector/config.ts","effector-react/../effector/is.ts","effector-react/../effector/throw.ts","effector-react/createGate.ts","effector-react/scope.ts","effector-react/ssr.ts","effector-react/throw.ts","effector-react/useIsomorphicLayoutEffect.ts","effector-react/../effector/collection.ts","effector-react/deprecate.ts"],"sourcesContent":["import {Store, clearNode, step, createNode, Scope, Node, Cmd} from 'effector'\n\nexport function createWatch<T>(\n  store: Store<T>,\n  fn: (value: T) => any,\n  scope?: Scope,\n  batchStep?: Cmd,\n) {\n  const seq: Cmd[] = [step.run({fn: value => fn(value)})]\n  if (batchStep) seq.unshift(batchStep)\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (store as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return () => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    }\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [store],\n      family: {owners: store},\n    })\n    return () => {\n      clearNode(node)\n    }\n  }\n}\n","export function withDisplayName(name: string, Component: any) {\n  Component.displayName = name\n  return Component\n}\n","import {Store, is, step, scopeBind, Scope, Unit, Event} from 'effector'\nimport React from 'react'\nimport {useSyncExternalStore} from 'use-sync-external-store/shim'\nimport {useSyncExternalStoreWithSelector} from 'use-sync-external-store/shim/with-selector'\nimport {throwError} from './throw'\nimport {createWatch} from './createWatch'\nimport {withDisplayName} from './withDisplayName'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {Gate} from './index.h'\n\nconst stateReader = <T>(store: Store<T>, scope?: Scope) =>\n  scope ? scope.getState(store) : store.getState()\nconst basicUpdateFilter = <T>(upd: T, oldValue: T) => upd !== oldValue\nconst keysEqual = (a?: readonly any[], b?: readonly any[]) => {\n  if (!a || !b || a.length !== b.length) return false\n\n  let isEqual = true\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      isEqual = false\n      break\n    }\n  }\n\n  return isEqual\n}\n\nexport function useStoreBase<State>(store: Store<State>, scope?: Scope) {\n  if (!is.store(store)) throwError('expect useStore argument to be a store')\n\n  const subscribe = React.useCallback(\n    (cb: () => void) => createWatch(store, cb, scope),\n    [store, scope],\n  )\n  const read = React.useCallback(\n    () => stateReader(store, scope),\n    [store, scope],\n  )\n  const currentValue = useSyncExternalStore(subscribe, read, read)\n\n  return currentValue\n}\n\nexport function useUnitBase<Shape extends {[key: string]: Unit<any>}>(\n  shape: Shape | {'@@unitShape': () => Shape},\n  scope?: Scope,\n) {\n  const isSingleUnit = is.unit(shape)\n  let normShape: {[key: string]: Unit<any>} = {}\n  if (isSingleUnit) {\n    normShape = {unit: shape}\n  } else if ('@@unitShape' in shape) {\n    if (typeof shape['@@unitShape'] === 'function') {\n      normShape = shape['@@unitShape']()\n    } else {\n      throwError('expect @@unitShape to be a function')\n    }\n  } else {\n    normShape = shape\n  }\n  const isList = Array.isArray(normShape)\n  const flagsRef = React.useRef({\n    stale: true,\n    justSubscribed: false,\n    scope,\n  })\n  const [eventsShape, storeKeys, storeValues] = React.useMemo(() => {\n    flagsRef.current.stale = true\n    const shape = Array.isArray(normShape) ? [] : ({} as any)\n    const storeKeys: string[] = []\n    const storeValues: Array<Store<any>> = []\n    for (const key in normShape) {\n      const unit = normShape[key]\n      if (!is.unit(unit)) throwError('expect useUnit argument to be a unit')\n      if (is.event(unit) || is.effect(unit)) {\n        shape[key] = scope ? scopeBind(unit as Event<any>, {scope}) : unit\n      } else {\n        shape[key] = null\n        storeKeys.push(key)\n        storeValues.push(unit as Store<any>)\n      }\n    }\n    return [shape, storeKeys, storeValues]\n  }, [flagsRef, scope, ...Object.keys(normShape), ...Object.values(normShape)])\n  const stateRef = React.useRef({value: eventsShape, storeKeys})\n  const subscribe = React.useCallback(\n    (cb: () => void) => {\n      const flags = flagsRef.current\n      flags.justSubscribed = true\n      const cbCaller = () => {\n        if (!flags.stale) {\n          flags.stale = true\n          cb()\n        }\n      }\n      const batchStep = step.compute({priority: 'sampler', batch: true})\n      const subs = storeValues.map(store =>\n        createWatch(store, cbCaller, scope, batchStep),\n      )\n      return () => {\n        subs.forEach(fn => fn())\n      }\n    },\n    [storeValues, scope, stateRef, flagsRef],\n  )\n  const read = React.useCallback(() => {\n    const state = stateRef.current\n    const flags = flagsRef.current\n    let resultValue\n    let changed = false\n    const oldVal = state.value\n    const oldKeys = state.storeKeys\n    const scopeChanged = scope !== flags.scope\n    if (flags.stale || flags.justSubscribed || scopeChanged) {\n      changed = !flags.justSubscribed || scopeChanged\n      resultValue = isList ? [...eventsShape] : {...eventsShape}\n      if (oldKeys.length !== storeKeys.length) {\n        changed = true\n      }\n      for (let i = 0; i < storeKeys.length; i++) {\n        const updatedValue = stateReader(storeValues[i], scope)\n        const key = storeKeys[i]\n        if (!changed) {\n          if (!oldKeys.includes(key)) {\n            changed = true\n          } else {\n            changed = oldVal[key] !== updatedValue\n          }\n        }\n        resultValue[key] = updatedValue\n      }\n    }\n    if (changed) {\n      state.value = resultValue\n    }\n    state.storeKeys = storeKeys\n    flags.stale = false\n    flags.justSubscribed = !changed\n    flags.scope = scope\n    return isSingleUnit ? state.value.unit : state.value\n  }, [subscribe, storeValues, scope, stateRef, flagsRef])\n  return useSyncExternalStore(subscribe, read, read)\n}\n\nexport function useStoreMapBase<State, Result, Keys extends ReadonlyArray<any>>(\n  [configOrStore, separateFn]: [\n    configOrStore:\n      | {\n          store: Store<State>\n          keys: Keys\n          fn(state: State, keys: Keys): Result\n          updateFilter?: (update: Result, current: Result) => boolean\n          defaultValue?: Result\n        }\n      | Store<State>,\n    separateFn?: (state: State, keys: Keys) => Result,\n  ],\n  scope?: Scope,\n): Result {\n  let fn: (state: State, keys: Keys) => Result\n  let updateFilter: (update: Result, current: Result) => boolean =\n    basicUpdateFilter\n  let defaultValue: Result | undefined\n  let store: Store<State>\n  let keys: Keys\n  if (separateFn) {\n    fn = separateFn\n    store = configOrStore as Store<State>\n    keys = [] as unknown as Keys\n  } else {\n    ;({\n      fn,\n      store,\n      keys,\n      defaultValue,\n      updateFilter = basicUpdateFilter,\n    } = configOrStore as any)\n  }\n  if (!is.store(store)) throwError('useStoreMap expects a store')\n  if (!Array.isArray(keys)) throwError('useStoreMap expects an array as keys')\n  if (typeof fn !== 'function') throwError('useStoreMap expects a function')\n\n  const subscribe = React.useCallback(\n    (cb: () => void) => createWatch(store, cb, scope),\n    [store, scope],\n  )\n  const read = React.useCallback(\n    () => stateReader(store, scope),\n    [store, scope],\n  )\n\n  const stateRef = React.useRef<State>()\n  const valueRef = React.useRef<Result>()\n  const keysRef = React.useRef(keys)\n\n  const value = useSyncExternalStoreWithSelector(\n    subscribe,\n    read,\n    read,\n    state => {\n      if (stateRef.current !== state || !keysEqual(keysRef.current, keys)) {\n        let result = fn(state, keys)\n        if (result === undefined && defaultValue !== undefined) {\n          result = defaultValue\n        }\n        stateRef.current = state\n        keysRef.current = keys\n\n        /**\n         * skip update, if undefined\n         * just like original store or previous implementation\n         */\n        if (result !== undefined) {\n          valueRef.current = result\n        }\n      }\n\n      return valueRef.current as Result\n    },\n    (current, update) => !updateFilter(update, current),\n  )\n\n  return value\n}\nexport function useListBase<T>(\n  list: Store<T[]>,\n  renderItem:\n    | {\n        keys?: any[]\n        fn(item: T, index: number): React.ReactNode\n        getKey?: (item: T) => string\n        placeholder?: React.ReactNode\n      }\n    | ((item: T, index: number) => React.ReactNode),\n  scope?: Scope,\n): React.ReactNode {\n  let keys = [] as any[]\n  let fn\n  let getKey: ((item: T) => string) | void\n  let placeholder: React.ReactNode | void\n  if (typeof renderItem === 'object' && renderItem !== null) {\n    if (renderItem.keys) keys = renderItem.keys\n    ;({fn, getKey, placeholder} = renderItem)\n  } else {\n    fn = renderItem\n  }\n  if (!is.store(list)) throwError('expect useList first argument to be a store')\n  if (typeof fn !== 'function')\n    throwError(\"expect useList's renderItem to be a function\")\n  if (!Array.isArray(keys)) throwError(\"expect useList's keys to be an array\")\n  const Item = React.useMemo(() => {\n    const Item = withDisplayName(\n      `${list.shortName || 'Unknown'}.Item`,\n      (\n        props:\n          | {index: number; keys: any[]; keyVal: never; value: never}\n          | {index: never; keys: any[]; keyVal: string; value: T},\n      ) => {\n        const {index, keys, keyVal, value} = props\n        const isKeyed = !!fnRef.current[1]\n        if (isKeyed) {\n          return fnRef.current[0](value, keyVal as any)\n        }\n        const item = useStoreMapBase(\n          [\n            {\n              store: list,\n              keys: [index, ...keys],\n              fn: (list, keys) => list[keys[0]],\n            },\n          ],\n          scope,\n        )\n        return fnRef.current[0](item, index)\n      },\n    )\n    return React.memo(Item)\n  }, [list, scope, !!getKey!])\n  const fnRef = React.useRef([fn, getKey!] as const)\n  fnRef.current = [fn, getKey!]\n  const keysSelfMemo = React.useMemo(() => keys, keys)\n  if (getKey!) {\n    const listItems = useStoreBase(list, scope)\n    if (listItems.length === 0 && placeholder) return placeholder\n    return listItems.map(value => {\n      const key = fnRef.current[1](value)\n      return React.createElement(Item, {\n        keyVal: key,\n        key,\n        keys: keysSelfMemo,\n        value,\n      })\n    })\n  } else {\n    const length = useStoreMapBase(\n      [\n        {\n          store: list,\n          keys: [list],\n          fn: list => list.length,\n        },\n      ],\n      scope,\n    )\n    if (length === 0 && placeholder) return placeholder\n    return Array.from({length}, (_, i) =>\n      React.createElement(Item, {\n        index: i,\n        key: i,\n        keys: keysSelfMemo,\n      }),\n    )\n  }\n}\n\nexport function useEventBase(eventObject: any, scope?: Scope) {\n  if (!scope) {\n    return eventObject\n  }\n  const isShape = !is.unit(eventObject) && typeof eventObject === 'object'\n  const events = isShape ? eventObject : {event: eventObject}\n\n  return React.useMemo(() => {\n    if (is.unit(eventObject)) {\n      //@ts-expect-error\n      return scopeBind(eventObject, {scope})\n    }\n    const shape = Array.isArray(eventObject) ? [] : ({} as any)\n    for (const key in eventObject) {\n      shape[key] = scopeBind(eventObject[key], {scope})\n    }\n    return shape\n  }, [scope, ...Object.keys(events), ...Object.values(events)])\n}\n\nexport function useGateBase<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n  scope?: Scope,\n) {\n  const {open, close, set} = useUnitBase(\n    {\n      open: GateComponent.open,\n      close: GateComponent.close,\n      set: GateComponent.set,\n    },\n    scope,\n  )\n  const ForkedGate = React.useMemo(\n    () =>\n      ({\n        open,\n        close,\n        set,\n      } as Gate<Props>),\n    [GateComponent, open],\n  )\n\n  const propsRef = React.useRef<{value: any; count: number}>({\n    value: null,\n    count: 0,\n  })\n  useIsomorphicLayoutEffect(() => {\n    ForkedGate.open(propsRef.current.value)\n    return () => ForkedGate.close(propsRef.current.value) as any\n  }, [ForkedGate])\n  if (!shallowCompare(propsRef.current.value, props)) {\n    propsRef.current.value = props\n    propsRef.current.count += 1\n  }\n  useIsomorphicLayoutEffect(() => {\n    ForkedGate.set(propsRef.current.value)\n  }, [propsRef.current.count])\n}\n\nfunction shallowCompare(a: any, b: any) {\n  if (a === b) return true\n  if (\n    typeof a === 'object' &&\n    a !== null &&\n    typeof b === 'object' &&\n    b !== null\n  ) {\n    const aKeys = Object.keys(a)\n    const bKeys = Object.keys(b)\n    if (aKeys.length !== bKeys.length) return false\n    for (let i = 0; i < aKeys.length; i++) {\n      const key = aKeys[i]\n      if (a[key] !== b[key]) return false\n    }\n    return true\n  }\n  return false\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import {createStore, launch, Domain, createEvent} from 'effector'\nimport {Gate} from './index.h'\nimport {withDisplayName} from './withDisplayName'\nimport {useGateBase} from './apiBase'\nimport {flattenConfig, processArgsToConfig} from '../effector/config'\nimport {isObject} from '../effector/is'\n\nexport function createGateImplementation<State>({\n  domain,\n  defaultState,\n  hook: useGateHook,\n  mainConfig,\n  maybeConfig,\n}: {\n  domain?: Domain\n  defaultState: State | {}\n  hook: typeof useGateBase\n  mainConfig?: Record<string, any>\n  maybeConfig?: Record<string, any> & {sid?: string}\n}): Gate<State> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: mainConfig,\n  }) as {sid: string | undefined; name: string | undefined}\n  const name = config.name || 'gate'\n  const fullName = `${domain ? `${domain.compositeName.fullName}/` : ''}${name}`\n  const set = createEvent<State>({\n    name: `${fullName}.set`,\n    sid: config.sid ? `${config.sid}|set` : undefined,\n  })\n  const open = createEvent<State>({\n    name: `${fullName}.open`,\n    sid: config.sid ? `${config.sid}|open` : undefined,\n  })\n  const close = createEvent<State>({\n    name: `${fullName}.close`,\n    sid: config.sid ? `${config.sid}|close` : undefined,\n  })\n  const status = createStore(Boolean(false), {\n    name: `${fullName}.status`,\n    serialize: 'ignore',\n    // doesn't need to have sid, because it is internal store, should not be serialized\n  })\n    .on(open, () => Boolean(true))\n    .on(close, () => Boolean(false))\n  const state = createStore(defaultState as State, {\n    name: `${fullName}.state`,\n    sid: config.sid,\n  })\n    .on(set, (_, state) => state)\n    .on(open, (_, state) => state)\n    .reset(close)\n  if (domain) {\n    const {hooks} = domain as any\n    launch({\n      target: [\n        hooks.store,\n        hooks.store,\n        hooks.event,\n        hooks.event,\n        hooks.event,\n      ] as any,\n      params: [status, state, open, close, set],\n    })\n  }\n  function GateComponent(props: State) {\n    useGateHook(GateComponent as any, props)\n    return null\n  }\n  GateComponent.open = open\n  GateComponent.close = close\n  GateComponent.status = status\n  GateComponent.state = state\n  GateComponent.set = set\n  return withDisplayName(`Gate:${fullName}`, GateComponent)\n}\n\nconst isPluginConfig = (config: Record<string, any> | string) =>\n  isObject(config) && 'sid' in config\n\nconst isGateConfig = (config: Record<string, any> | string) =>\n  isObject(config) &&\n  ('domain' in config || 'defaultState' in config || 'name' in config)\n\nconst isStructuredConfig = (arg: unknown) =>\n  isObject(arg) && (arg.and || arg.or)\n\nexport function processCreateGateConfig<State>(\n  hook: typeof useGateBase,\n  args: unknown[],\n): {\n  domain?: Domain\n  defaultState: State | {}\n  hook: typeof useGateBase\n  mainConfig?: Record<string, any>\n  maybeConfig?: Record<string, any> & {sid?: string}\n} {\n  const universalConfig =\n    args && isStructuredConfig(args[0]) ? args : [{and: args}]\n  const [[nameOrConfig, defaultStateOrConfig], metadata] =\n    processArgsToConfig(universalConfig)\n\n  let domain\n  let defaultState = {}\n  let mainConfig = {}\n  let maybeConfig = metadata\n\n  if (typeof nameOrConfig === 'string') {\n    mainConfig = {name: nameOrConfig}\n    if (isPluginConfig(defaultStateOrConfig)) {\n      // maybeConfig = defaultStateOrConfig\n    } else {\n      defaultState = defaultStateOrConfig || {}\n    }\n  } else if (isGateConfig(nameOrConfig)) {\n    mainConfig = nameOrConfig\n    defaultState = nameOrConfig.defaultState || {}\n    domain = nameOrConfig.domain\n  }\n  return {\n    hook,\n    domain,\n    defaultState,\n    mainConfig,\n    maybeConfig,\n  }\n}\n\nexport function createGate<Props>(...args: unknown[]): Gate<Props> {\n  return createGateImplementation<Props>(\n    processCreateGateConfig(useGateBase, args),\n  )\n}\n","import React from 'react'\nimport {Scope} from 'effector'\nimport {throwError} from './throw'\n\nconst ScopeContext = React.createContext(null as Scope | null)\nexport const {Provider} = ScopeContext\nexport function getScope(forceScope?: boolean) {\n  const scope = React.useContext(ScopeContext)\n  if (forceScope && !scope)\n    throwError('No scope found, consider adding <Provider> to app root')\n  return scope as Scope\n}\n","import React from 'react'\nimport {Domain, Store} from 'effector'\nimport {\n  useStoreBase,\n  useUnitBase,\n  useStoreMapBase,\n  useListBase,\n  useEventBase,\n  useGateBase,\n} from './apiBase'\nimport {withDisplayName} from './withDisplayName'\nimport {createGateImplementation, processCreateGateConfig} from './createGate'\nimport type {Gate} from './index.h'\nimport {throwError} from './throw'\nimport {deprecate} from './deprecate'\nimport {getScope} from './scope'\n\nexport function createGate<Props>(\n  ...args: Array<\n    | {\n        domain?: Domain\n        defaultState?: Props\n        name?: string\n      }\n    | {}\n  >\n) {\n  return createGateImplementation(processCreateGateConfig(useGateBase, args))\n}\n\nexport function createStoreConsumer(store: any) {\n  return (props: any) => {\n    const state = useStore(store)\n    return props.children(state)\n  }\n}\n\nexport const createContextComponent = (\n  store: any,\n  context: any,\n  renderProp: any,\n) => {\n  deprecate('createContextComponent')\n  return (props: any) => {\n    const ctx = React.useContext(context)\n    const state = useStore(store)\n    return renderProp(props, state, ctx)\n  }\n}\n\nexport const createComponent = (shape: any) => throwError('not implemented')\n\nexport const createReactState = (store: any, Component: any) => {\n  deprecate('createReactState')\n  return connect(Component)(store)\n}\n\nexport const connect = (Component: any) => (store: any) => {\n  let View: any = Component\n  if (typeof Component !== 'function') {\n    View = store\n    store = Component as any\n  }\n  const wrappedComponentName = View.displayName || View.name || 'Unknown'\n  return withDisplayName(`Connect(${wrappedComponentName})`, (props: any) =>\n    React.createElement(View, {...props, ...(useStore(store) as any)}),\n  )\n}\n\n/** useStore wrapper for scopes */\nexport function useStore<T>(store: Store<T>): T {\n  return useStoreBase(store, getScope(true))\n}\nexport function useUnit(shape) {\n  return useUnitBase(shape, getScope(true))\n}\n/** useList wrapper for scopes */\nexport function useList(store: any, opts: any) {\n  return useListBase(store, opts, getScope(true))\n}\n/** useStoreMap wrapper for scopes */\nexport function useStoreMap(configOrStore: any, separateFn: any) {\n  const scope = getScope(true)\n  if (separateFn) return useStoreMapBase([configOrStore, separateFn], scope)\n  return useStoreMapBase(\n    [\n      {\n        store: configOrStore.store,\n        keys: configOrStore.keys,\n        fn: configOrStore.fn,\n        updateFilter: configOrStore.updateFilter,\n      },\n    ],\n    scope,\n  )\n}\n\n/**\nbind event to scope\n\nworks like React.useCallback, but for scopes\n*/\nexport function useEvent(eventObject: any) {\n  return useEventBase(eventObject, getScope(true))\n}\n\n/** useGate wrapper for scopes */\nexport function useGate<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n) {\n  return useGateBase(GateComponent, props, getScope(true))\n}\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","import React from 'react'\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n","export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export const deprecate = (method: string) =>\n  console.error(`${method} is deprecated`)\n"],"names":["createWatch","store","fn","scope","batchStep","seq","step","run","value","unshift","node","createNode","id","graphite","scopeLinks","additionalLinks","links","push","idx","indexOf","splice","clearNode","parent","family","owners","withDisplayName","name","Component","displayName","useStoreBase","is","throwError","subscribe","React","useCallback","cb","read","stateReader","useSyncExternalStore","useUnitBase","shape","isSingleUnit","unit","normShape","isList","Array","isArray","flagsRef","useRef","stale","justSubscribed","eventsShape","storeKeys","storeValues","useMemo","current","key","event","effect","scopeBind","Object","keys","values","stateRef","flags","cbCaller","compute","priority","batch","subs","map","forEach","resultValue","state","changed","oldVal","oldKeys","scopeChanged","length","i","updatedValue","includes","useStoreMapBase","configOrStore","separateFn","defaultValue","updateFilter","basicUpdateFilter","valueRef","keysRef","useSyncExternalStoreWithSelector","a","b","isEqual","keysEqual","result","undefined","update","useGateBase","GateComponent","props","open","close","set","ForkedGate","propsRef","count","useIsomorphicLayoutEffect","aKeys","bKeys","shallowCompare","processArgsToConfig","args","singleArgument","rawConfig","condition","Error","assert","isObject","isFunction","metadata","or","childConfig","and","unwrappedNestedValue","nested","processCreateGateConfig","hook","universalConfig","arg","domain","nameOrConfig","defaultStateOrConfig","defaultState","mainConfig","maybeConfig","config","isGateConfig","getScope","forceScope","useContext","ScopeContext","useStore","message","window","useLayoutEffect","useEffect","getState","upd","oldValue","flattenConfig","part","obj","field","isVoid","forIn","deprecate","method","console","error","createContext","Provider","connect","View","createElement","context","renderProp","ctx","useGateHook","fullName","compositeName","createEvent","sid","status","createStore","Boolean","serialize","on","_","reset","hooks","launch","target","params","createGateImplementation","children","eventObject","events","useEventBase","opts","list","renderItem","getKey","placeholder","Item","shortName","index","keyVal","fnRef","item","memo","keysSelfMemo","listItems","from","useListBase"],"mappings":"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"}